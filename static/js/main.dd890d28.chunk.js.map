{"version":3,"sources":["reducers/index.js","constants.js","actions/index.js","components/App.js","index.js"],"names":["addLine","action","id","Date","Math","random","name","role","status","conOn","toISOString","slice","removeById","state","filter","line","sortByField","field","order","lines","sort","a","b","updateById","map","type","deleteLine","updateLine","sortLines","fetchLines","RoleList","StatusList","App","curLine","searchFor","componentDidMount","handleCurLine","e","setState","fetch","method","then","response","json","round","abs","address","geo","lat","length","lng","floor","pow","props","onChange","target","value","handleSubmit","preventDefault","trim","clearAddLineFormFields","document","getElementById","reset","handleSearch","filterLines","phrase","indexOf","countFreq","arr","key","reduce","prev","curr","objToStr","obj","Object","entries","x","join","resetSearch","startSearch","prevState","renderLines","stat","className","href","aria-hidden","onClick","style","padding","height","defaultValue","val","index","onSubmit","this","placeholder","required","Component","connect","dispatch","bindActionCreators","store","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render"],"mappings":"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","file":"static/js/main.dd890d28.chunk.js","sourcesContent":["import {ADD_LINE, DELETE_LINE, UPDATE_LINE, SORT_LINES, FETCH_LINES} from \"../constants\";\n\nconst addLine = (action) => {\n  return {\n    id: (+ new Date()) + Math.random(),\n    name: action.name,\n    role: action.role,\n    status: action.status,\n    conOn: new Date(action.conOn).toISOString().slice(0,10)\n  }\n}\n\nconst removeById = (state =[], id) => {\n  return state.filter(line => line.id !== id);\n}\n\nconst sortByField = (state =[], field, order) => {\n  const lines = state.slice();\n\n  lines.sort((a, b) => {\n\n    if(a[field] < b[field]) {\n      return (order === 'asc') ? -1 : 1;\n    }\n    if(a[field] > b[field]) {\n      return (order === 'asc') ? 1 : -1;\n    }\n    return 0;\n  });\n\n  return lines;\n}\n\nconst updateById = (state, action) => {\n  return state.map(\n    line => line.id===action.id ? {...line, status: action.status} : line\n  );\n}\n\nconst lines = (state = [], action) => {\n  switch (action.type) {\n\n    case FETCH_LINES:\n      return action.lines;\n\n    case ADD_LINE:\n      return [addLine(action), ...state];\n\n    case DELETE_LINE:\n      return removeById(state, action.id);\n\n    case UPDATE_LINE:\n      return updateById(state, action);\n\n    case SORT_LINES:\n      return sortByField(state, action.field, action.order);\n\n    default:\n      return state;\n  }\n}\n\nexport default lines;\n","export const ADD_LINE = 'ADD_LINE';\nexport const DELETE_LINE = 'DELETE_LINE';\nexport const UPDATE_LINE = 'UPDATE_LINE';\nexport const SORT_LINES = 'SORT_LINES';\nexport const FETCH_LINES = 'FETCH_LINES';\n\n","import {ADD_LINE, DELETE_LINE, UPDATE_LINE, SORT_LINES, FETCH_LINES} from '../constants';\n\nexport const addLine = (line) => ({type: ADD_LINE, name: line.name, role: line.role, conOn: line.conOn, status: line.status})\n\nexport const deleteLine = (id) => ({type: DELETE_LINE, id})\n\nexport const updateLine = (line) => ({type: UPDATE_LINE, id:line.id, name: line.name, role: line.role, conOn: line.conOn, status: line.status})\n\nexport const sortLines = (field, order) => ({type: SORT_LINES, field, order})\n\nexport const fetchLines = (lines) => ({type: FETCH_LINES, lines})\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { addLine, deleteLine, updateLine, sortLines, fetchLines } from '../actions';\n\nconst RoleList = ['Engineer', 'Sales', 'Customer Support', 'Manager'];\nconst StatusList = ['Screen', 'Scheduled', 'Explored', 'Hire'];\n\nclass App extends Component {\n  state = {\n    role: RoleList[0],\n    status: StatusList[0],\n    curLine: -1,\n    searchFor: ''\n  }  \n\n  componentDidMount = () => ( this.fetchLines() );\n    \n  handleCurLine = id => e => ( this.setState({curLine: id}) );\n    \n  fetchLines = () => {\n      const url = \"https://jsonplaceholder.typicode.com/users\";\n      let lines = [];\n\n      fetch(url, {\n        method: 'GET'\n      })\n        .then(response => response.json())\n        .then(json => {\n          lines = json.map((line) => {            \n            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            // Unfortunately, the fields: Role, ConnectedOn and Status - are not in the response \n            // of the REST-service that I use to simulate receiving data(https://jsonplaceholder.typicode.com/), so \n            // I emulate the missing values based on geodata and a random Date. Whatever :)\n            let role = RoleList[Math.round(Math.abs(line.address.geo.lat)) % RoleList.length];\n            let status = StatusList[Math.round(Math.abs(line.address.geo.lng)) % StatusList.length];\n            let conOn = new Date(+(new Date()) - Math.floor(Math.random()*Math.pow(10,11))).toISOString().slice(0,10);\n            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n            return {...line, role, status, conOn};\n          });\n          this.props.fetchLines(lines);\n        });\n    }\n\n  onChange = e => ( this.setState({[e.target.name]: e.target.value}) );\n    \n  handleSubmit = e => {\n    e.preventDefault();\n\n    let name = this.state.name.trim(),\n        role = this.state.role.trim(),\n        conOn = this.state.conOn.trim(),\n        status = this.state.status.trim();\n\n\n    if(!name || !role || !conOn || !status ) {\n      return;\n    }\n\n    this.props.addLine(this.state);\n    this.clearAddLineFormFields();\n  }\n\n  clearAddLineFormFields = () => ( document.getElementById(\"add-comment-form\").reset() );\n    \n  handleSearch = e => {\n    e.preventDefault();\n\n    const { lines } = this.props;\n    return this.filterLines(lines);\n  }\n\n  filterLines = lines => {\n\n    if(this.state && this.state.searchFor) {\n      const phrase = this.state.searchFor.trim();\n\n      return lines.filter(line => {\n\n        if(line.id === phrase) {\n          return 1;\n\n        } else if(line.name.indexOf(phrase) !== -1) {\n          return 1;\n\n        } else if(line.role.indexOf(phrase) !== -1) {\n          return 1;\n\n        } else if(line.conOn.indexOf(phrase) !== -1) {\n          return 1;\n        \n        } else if(line.status.indexOf(phrase) !== -1) {\n          return 1;\n        }       \n\n        return 0;\n      });\n    }\n\n    return lines;\n  }\n\n  deleteLine = id => e => ( this.props.deleteLine(id) );\n\n  updateLine = line => e => {\n    this.props.updateLine({...line, [e.target.name]: e.target.value });\n    this.setState({curLine: -1});\n  }\n\n  sortLines = (field, order) => e => ( this.props.sortLines(field, order) );\n    \n  countFreq = (arr, key) => ( arr.reduce((prev, curr) => (prev[curr[key]] = ++prev[curr[key]] || 1, prev), {}) );\n  \n  objToStr = obj => ( Object.entries(obj).sort().map(x=>x.join(\": \")).join(\" ,   \") );\n\n  resetSearch = () => ( this.setState({searchFor: '', phrase: ''}) );\n\n  startSearch = () => ( this.setState((prevState) => ({searchFor: prevState.phrase})) );  \n\n  renderLines = () => {\n    // let { lines } = this.props;\n    let lines = this.filterLines( this.props.lines);\n    let stat = this.countFreq(lines, 'status');\n\n    return (\n      <div>\n        <div className=\"pull-left\"><span className=\"label label-primary\">{this.objToStr(stat)} &nbsp; | &nbsp; TOTAL: {lines.length} lines</span></div>\n        <table className=\"table table-hover\">\n          <thead>\n            <tr>\n              <th>Name &nbsp;\n                <a href='#'><i className=\"fa fa-arrow-up\" aria-hidden=\"true\" onClick={ this.sortLines('name', 'asc') }></i></a>\n                <a href='#'><i className=\"fa fa-arrow-down\" aria-hidden=\"true\" onClick={ this.sortLines('name', 'desc') }></i></a>\n              </th>\n              <th>Role &nbsp;\n                <a href='#'><i className=\"fa fa-arrow-up\" aria-hidden=\"true\" onClick={ this.sortLines('role', 'asc') }></i></a>\n                <a href='#'><i className=\"fa fa-arrow-down\" aria-hidden=\"true\" onClick={ this.sortLines('role', 'desc') }></i></a>\n              </th>\n              <th>Connected On &nbsp;\n                <a href='#'><i className=\"fa fa-arrow-up\" aria-hidden=\"true\" onClick={ this.sortLines('conOn', 'asc') }></i></a>\n                <a href='#'><i className=\"fa fa-arrow-down\" aria-hidden=\"true\" onClick={ this.sortLines('conOn', 'desc') }></i></a>\n              </th>\n              <th>Status &nbsp;\n                <a href='#'><i className=\"fa fa-arrow-up\" aria-hidden=\"true\" onClick={ this.sortLines('status', 'asc') }></i></a>\n                <a href='#'><i className=\"fa fa-arrow-down\" aria-hidden=\"true\" onClick={ this.sortLines('status', 'desc') }></i></a>\n              </th>\n              <th>Delete</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            { lines.map(line => {\n              return (\n                <tr key={line.id}>\n                  <td>{line.name}</td>\n                  <td>{line.role}</td>\n                  <td>{line.conOn}</td>\n                  { this.state.curLine !== line.id \n                    ?\n                      <td className=\"col-md-2\" onClick={this.handleCurLine(line.id)}>{line.status}</td>\n                    :\n                      <td className=\"col-md-2\">                      \n                        <select style={{padding: 0, height:'100%'}} name=\"status\" className=\"form-control\" defaultValue={line.status} onChange={this.updateLine(line)}>\n                          {StatusList.map((val, index) => \n                            <option key={index} value={val}>{val}</option>\n                          )}\n                        </select>\n                      </td>\n                  }\n                  <td>\n                    <button className=\"btn btn-danger btn-xs\" onClick={ this.deleteLine(line.id) }>\n                      <i className=\"fa fa-times\" aria-hidden=\"true\" ></i>\n                    </button>\n                  </td>\n                </tr>\n              )\n              })}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  render () {\n    return (\n      <div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-4\">\n              <h3>Staff </h3>\n            </div>\n            <div className=\"col-sm-8\">\n              <div className=\"form-inline pull-right\">\n                <div className=\"form-group\">\n                  <form onSubmit={this.handleSearch}>\n                    <input\n                      type=\"text\"\n                      name=\"phrase\"\n                      className=\"form-control\"\n                      placeholder=\"Search...\"\n                      onChange={this.onChange}/>\n\n                    <button\n                      type=\"submit\"\n                      onClick={this.startSearch}\n                      className=\"btn btn-primary\"><i className=\"fa fa-search\" aria-hidden=\"true\"></i> Search</button>\n                    <button\n                      type=\"reset\"\n                      onClick={this.resetSearch}\n                      className=\"btn btn-danger\"><i className=\"fa fa-recycle\" aria-hidden=\"true\"></i> Reset</button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"form-inline\">\n            <div className=\"form-group\">\n              <form id=\"add-comment-form\" onSubmit={this.handleSubmit}>\n\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  className=\"form-control\"\n                  placeholder=\"Name...\"\n                  required\n                  onChange={this.onChange}/>\n\n                <select name=\"role\" className=\"form-control\" value={this.state.role} onChange={this.onChange}>\n                  {RoleList.map((val, index) => \n                    <option key={index} value={val}>{val}</option>\n                  )}\n                </select>\n\n                <input\n                  type=\"date\"\n                  name=\"conOn\"\n                  className=\"form-control\"\n                  placeholder=\"Connected On...\"\n                  required\n                  onChange={this.onChange}/>\n\n                <select name=\"status\" className=\"form-control\" value={this.state.status} onChange={this.onChange}>\n                  {StatusList.map((val, index) => \n                    <option key={index} value={val}>{val}</option>\n                  )}\n                </select>\n\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-success\"><i className=\"fa fa-plus\" aria-hidden=\"true\"></i> Add Line</button>\n\n              </form>\n            </div>\n          </div>\n\n          { this.renderLines() }\n\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({  \n  lines: state  \n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({addLine, deleteLine, updateLine, sortLines, fetchLines}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from \"react-redux\";\r\nimport {createStore} from \"redux\";\r\nimport reducer from \"./reducers\";\r\n\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\r\nimport App from \"./components/App\";\r\n\r\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    window.document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}